<?php

    require_once(dirname(__FILE__) . '/lib/challonge.php');
    module_load_include('inc', 'node', 'node.pages');
    ChallongeAPI::$api_key = variable_get('challonge_api_key', '');

    function helper_add_tournament($name, $type, $url, $optional = array())
    {
        $tournament = new ChallongeTournament(); 

        $tournament_params = array();
        $tournament_params['tournament'] = $optional;
        $tournament_params['tournament']['name'] = $name;    
        $tournament_params['tournament']['type'] = $type;    
        $tournament_params['tournament']['url'] = $url;    

        $tournament->setParams($tournament_params);
        return $tournament->reqCreate();
    }

    /**Creates a challonge participant using the user's sc2 character name. */
    function helper_add_particpant($tournament_id, $uid, $seed_number = NULL)
    {
       //Get's the sc2name from the sc2ranks module.   
       $char_name_field = variable_get("sc2ranks_name_profile_field", "profile_character_name");
       $result = db_query(
                          'SELECT {profile_fields}.name, {profile_values}.value
                           FROM {profile_values}
                           LEFT JOIN {profile_fields} ON {profile_values}.fid = {profile_fields}.fid
                           WHERE {profile_values}.uid = %d
                           AND {profile_fileds}.name IN (\'%s\')', $uid, $char_name_field);
       $char_info = db_fetch_object($result);
       //TODO: check for nulls
       $paricipant_params['participant']['name'] = $char_info ->name; 
       if($seed_number != NULL){
           $participant_params['participant']['seed'] = $seed_number;
       }
       $participant = new ChallongeParticipant($tournament_id);
       $participant->setParmas($participant_params);
       $participant->reqCreate();
    }

    function helper_get_matches($tournament_id)
    {
        $matches = new ChallongeMatch($tournament_id);
        return $matches->reqIndex();
    }

    function helper_update_cache()
    {
    }

    function challonge_theme()
    {
        return array(
             'index' => array(
                          'template' => 'challonge_index',
                          'arguments' => array('tournaments' => NULL)
                        )
        );
    }
  
    function template_preprocess_challonge_index(&$varibles)
    {
        //TODO: clean and validate data here.      
    } 
    /**
     *Displays all the tournaments
     *TODO: Should limit tournaments to active ones.
     */ 
    function challonge_tournament_index()
    {
        //Get all the tournaments.
        $query = db_query('SELECT * FROM {challonge_tournament}');
        //Send them to a theme.
       $tournaments = array();
        while($tournament = db_fetch_object($query)){
            $tournaments[] = $tournament; 
        }
        return theme('index', $tournaments);
    }

    /**
     * Implementation of hook_perm
     */
    function challonge_perm()
    {
        return array('administer challonge');
    }

    /**
     * Implementation of hook_menu
     */
    function challonge_menu()
    {
        return array(
            'admin/settings/challonge' => array(
                'title' => t('Challonge'),
                'description' => t('Adjust the settings for the Challonge module.'),
                'file' => 'challonge.admin.inc',
                'page callback' => 'drupal_get_form',
                'page arguments' => array('challonge_settings_form'),
                'access arguments' => array('administer challonge'),
                'type' => MENU_NORMAL_ITEM
            ),
        );
    }

    /**
     * Implementation of hook_node_info
     */
    function challonge_node_info()
    {
        return array(
            'tournament' => array(
                'name' => t('Challonge Tournament'),
                'module' => 'challonge',
                'description' => t('A tournament for Challonge.'),
                'help' => t('A tournament for Challonge.')
            )
        );
    }

    /**
     * Implementation of hook_load
     */
    function challonge_load($node)
    {
        $additions = db_fetch_object(db_query("SELECT * FROM {challonge_tournament} WHERE nid = %d", $node->nid));
        return $additions;
    }

    /**
     * Implementation of hook_insert
     */
    function challonge_insert($node)
    {
        //Builds the optional array
        $params = array();
        if (strlen($node->subdomain) > 0)
        {
            $params['subdomain'] = $node->subdomain;
        }
        if(strlen($node->description) > 0)
        {
            $params['description'] = $node->description;
        }
        $xml = helper_add_tournament($node->title, $node->type, $node->url, $params);
        if ($xml->error)
        {
            drupal_set_message(t('Error adding to Challonge: @error', array('@error' => $xml->error)));
        }
        else
        {
            db_query("INSERT INTO {challonge_tournament} (nid, tournament_id, type, url, subdomain) VALUES (%d, %d, '%s', '%s', '%s')", $node->nid, $xml->id, $node->tournament_type, $node->url, $node->subdomain);
        }
    }

    /**
     * Implementation of hook_update
     */
    function challonge_update($node)
    {
        db_query("UPDATE {challonge_tournament} SET type = '%s', url = '%s', subdomain = '%s' WHERE nid = %d", $node->tournament_type, $node->url, $node->subdomain, $node->nid);
    }


    /**
     * Implemenataion of hook_view
     */
    function challonge_view(&$node, $teaser = FALSE, $page = FALSE)
    {
        //Gather tourney info
        $matches = helper_get_matches($node->url);
        if($matches->error){
            drupal_set_message(t('Unable to retrieve matches'));
        }
        return $matches;
    }
    /**
     * Implementation of hook_form
     */
    function challonge_form(&$node, $form_state)
    {
        return array(
            'title' => array(
                '#type' => 'textfield',
                '#title' => t('Name'),
                '#default_value' => $node->title,
                '#required' => true
            ),
            'body' => array(
                '#type' => 'textarea',
                '#title' => t('Description'),
                '#default_value' => $node->body,
                '#rows' => 10,
                '#required' => true
            ),
            //FIXME: I believe this code causes a warning to be thrown when trying to edit the tournament.
            'tournament_type' => array(
                '#type' => 'select',
                '#title' => t('Tournament Type'),
                '#default_value' => $node->type,
                '#options' => array(
                    'single elimination' => t('Single Elimination'),
                    'double elimination' => t('Double Elimination'),
                    'swiss' => t('Swiss'),
                    'round robin' => t('Round Robin')
                ),
                '#required' => true
            ),
            'url' => array(
                '#type' => 'textfield',
                '#title' => t('Challonge URL'),
                '#default_value' => $node->url,
                '#required' => true
            ),
            'subdomain' => array(
                '#type' => 'textfield',
                '#title' => t('Challonge Subdomain'),
                '#default_value' => $node->subdomain,
                '#required' => false
            )
        );
    }

    /**
     * Implementation of hook_validate
     */
    function challonge_validate($node, &$form)
    {
        // TODO: Make sure it will not cause a duplicate url/subdomain.
        if (!preg_match('/^[a-zA-Z0-9_]+$/', $node->url))
        {
            form_set_error('challonge_url', t('The url must only contain letters, numbers and underscores.'));
        }
    }

