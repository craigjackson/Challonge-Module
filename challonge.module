<?php
    /**Notes: when we need to cache
       1) Matches should be cached after
    */
    require_once(dirname(__FILE__) . '/lib/challonge.php');
    module_load_include('inc', 'node', 'node.pages');
    ChallongeAPI::$api_key = variable_get('challonge_api_key', '');

    $challonge_has_matches;
    $challonge_match_count;

    //TODO: most of these helper functions could probably be refactored into the challonge
   //library.
    function helper_add_tournament($name, $type, $url, $optional = array())
    {
        $tournament = new ChallongeTournament(); 

        $tournament_params = array();
        $tournament_params['tournament'] = $optional;
        $tournament_params['tournament']['name'] = $name;    
        $tournament_params['tournament']['tournament_type'] = $type;    
        $tournament_params['tournament']['url'] = $url;    

        $tournament->setParams($tournament_params);
        return $tournament->reqCreate();
    }

    function helper_report_winner($tournament_id, $match_id, $winner_id, $scores)
    {
        $match = new ChallongeMatch($tournament_id);
        return $match->reportWinner($match_id, $winner_id, $scores);
    }

    function helper_publish_tournament($tournament_id)
    {
        $tournament = new ChallongeTournament();
        return $tournament->reqPublish($tournament_id); 
    }

    function helper_start_tournament($tournament_id)
    {
        $tournament = new ChallongeTournament();
        return $tournament->reqStart($tournament_id);
    }

    function helper_get_matches($tournament_id, $active_only = FALSE)
    {
        $matches = new ChallongeMatch($tournament_id);	
        $matches_xml = $matches->reqIndex();
        if(!$active_only){
            return $matches_xml;
        }
        $match_array = array();

        foreach($matches_xml as $match){
            //skip if the match has already been played.
            $state = $match->xpath("state");
            $state = $state[0];
            if($state != "open"){
                continue;
            }
            $match_array[] = $match;
        }
        return $match_array;
    }

    function helper_edit_tournament($tournament_id, $name, $type, $url, $optional = array())
    {
        $tournament = new ChallongeTournament(); 

        $tournament_params = array();
        $tournament_params['tournament'] = $optional;
        $tournament_params['tournament']['name'] = $name;    
        $tournament_params['tournament']['type'] = $type;    
        $tournament_params['tournament']['url'] = $url;    

        $tournament->setParams($tournament_params);
        return $tournament->reqUpdate($tournament_id);
    }

    /**
     * Creates a participant on challonge using the user's sc2 character name.
     */
    function helper_add_participant($tournament_id, $uid, $seed_number = NULL)
    {
        $user = user_load($uid);
        $char_name_field = variable_get("challonge_profile_name_field", "name");
        $participant_params = array();
        $participant_params['participant']['name'] = $user->$char_name_field; 
        $participant_params['participant']['seed'] = $uid;

        if($seed_number != NULL){
            $participant_params['participant']['seed'] = $seed_number;
        }

        $participant = new ChallongeParticipant($tournament_id);
        $participant->setParams($participant_params);
        $participant_xml = $participant->reqCreate();
        $participant_id = $participant_xml->id;
        //TODO: error handling
        db_query("INSERT INTO {challonge_participants} (participant_id, tournament_id, 'name') 
                 VALUES (%s, %s, %s)", 
                 $participant_id, $tournament_id, $user->$char_name_field);
        return $participant_xml;
    }

    /**
     * Helper function that returns an array of participants
     * in ACTIVE matches. Return NULL if there are none.
     */
    function helper_get_participants($matches, $tournament_id)
    {
        $participant_array = array();
        if($matches == NULL){
            return NULL;
        } 
        //TODO: rewrite the following loop as an SQL statement. 
        foreach($matches as $match)
        {
            //Get the two player info for the current matches.
            $player1_id = $match->xpath("player1-id");
            $player1_id = $player1_id[0];

            $player2_id = $match->xpath("player2-id");
            $player2_id = $player2_id[0];

            $participant = new ChallongeParticipant($tournament_id);
            //TODO: access info from the cache.
            if($player1_id != ''){
                $player_1_xml = $participant->reqShow($player1_id);
                $player1 = (string)$player_1_xml->name;
            }
            if($player2_id != ''){
                $player_2_xml = $participant->reqShow($player2_id);
                $player2 = (string)$player_2_xml->name;
            }
            $participant_array[] = array(((string)$player1_id) => $player1,((string)$player2_id)=> $player2);
            //Getting the match id for each participant is a good thing.
            $return_array[] = array('match_id'=>(string)$match->id,'participants'=> $participant_array);
        }
        return $return_array;
    }


    /**
     * Implementation of hook_theme
     */
    function challonge_theme()
    {
        return array(
             'challonge_join' => array(
                          'arguments' => array('error' => NULL),
                          'template' => 'challonge_join'
             ),
             'challonge_view' => array(
                          'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL)
             ),
             'index' => array(
                          'template' => 'challonge_index',
                          'arguments' => array('tournaments' => NULL)
                        )
        );
    }
  
    function template_preprocess_challonge_index(&$varibles)
    {
        //TODO: clean and validate data here.      
    } 
    /**
     *Displays all the tournaments
     *TODO: Should limit tournaments to active ones.
     */ 
    function challonge_tournament_index()
    {
        //Get all the tournaments.
        $query = db_query('SELECT * FROM {challonge_tournament}');
        //Send them to a theme.
       $tournaments = array();
        while($tournament = db_fetch_object($query)){
            $tournaments[] = $tournament; 
        }
        return theme('index', $tournaments);
    }

    /**
     * Implementation of hook_perm
     */
    function challonge_perm()
    {
        return array('administer challonge', 'create tournaments', 'join tournaments', 'publish tournaments', 'start tournaments');
    }

    /**
     * Implementation of hook_menu
     */
    function challonge_menu()
    {
        $items = array();
        $items['admin/settings/challonge'] = array(
                                            'title' => t('Challonge'),
                                            'description' => t('Adjust the settings for the Challonge module.'),
                                            'file' => 'challonge.admin.inc',
                                            'page callback' => 'drupal_get_form',
                                            'page arguments' => array('challonge_settings_form'),
                                            'access arguments' => array('administer challonge'),
                                            'type' => MENU_NORMAL_ITEM
        );
        $items['challonge_join/%'] = array(
                                             'title' => t('Join Tournament'),
                                             'page callback' => 'challonge_join',
                                             'page arguments' =>array(1),
                                             'access arguments' => array('join tournaments'),
                                             'type' => MENU_CALLBACK
        );
        $items['challonge/test'] = array(
                                      'title' => t('test'),
                                      'access arguments' => array('join tournaments'),
                                      'page callback' => 'challonge_test',
                                      'type' => MENU_CALLBACK
                                     );
        $items['node/%challonge_menu_publish/publish'] = array(
            'title' => t('Publish'),
            'description' => t('Initiates the publish action on Challonge.'),
            'file' => 'challonge.pages.inc',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('challonge_publish_confirm', 1),
            'access arguments' => array('publish tournaments'),
            'type' => MENU_LOCAL_TASK
        );
        $items['node/%challonge_menu_start/start'] = array(
            'title' => t('Start'),
            'description' => t('Initiates the start action on Challonge.'),
            'file' => 'challonge.pages.inc',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('challonge_start_confirm', 1),
            'access arguments' => array('start tournaments'),
            'type' => MENU_LOCAL_TASK
        );
        return $items;
    }

    function challonge_menu_publish_load($nid)
    {
        $node = node_load($nid);
        if (empty($node->type) || $node->type != 'tournament')
        {
            return false;
        }
        $tournament = new ChallongeTournament();
        $xml = $tournament->reqShow($node->tournament_id);
        $published_at = $xml->xpath('published-at');
        if ($published_at[0]['nil'] != "true")
        {
            return false;
        }
        return $node;
    }

    function challonge_menu_start_load($nid)
    {
        $node = node_load($nid);
        if (empty($node->type) || $node->type != 'tournament')
        {
            return false;
        }
        $tournament = new ChallongeTournament();
        $xml = $tournament->reqShow($node->tournament_id);
        $started_at = $xml->xpath('started-at');
        if ($started_at[0]['nil'] != "true")
        {
            return false;
        }
        return $node;
    }

    /**
     * Implementation of hook_node_info
     */
    function challonge_node_info()
    {
        return array(
            'tournament' => array(
                'name' => t('Challonge Tournament'),
                'module' => 'challonge',
                'description' => t('A tournament for Challonge.'),
                'help' => t('A tournament for Challonge.')
            )
        );
    }
    /**
     * Implementation of hook_delete
     */
    function challonge_delete(&$node)
    {
        $tournament = new ChallongeTournament();
        $xml = $tournament->reqDestroy($node->url);
        if($xml->error){
            drupal_set_message(t('Unable to delete the tournament from the Challonge account.'), 'error');
        } 
    }

    /**
     * Implementation of hook_load
     */
    function challonge_load($node)
    {
        $additions = db_fetch_object(db_query("SELECT * FROM {challonge_tournament} WHERE nid = %d", $node->nid));
        return $additions;
    }

    function challonge_init_tournament_params($node)
    {
        $params = array();
        if(strlen($node->subdomain) > 0)
        {
            $params['subdomain'] = $node->subdomain;
        }
        if(strlen($node->body) > 0)
        {
            $params['description'] = $node->body;
        }
        return $params;
    }

    /**
     * Implementation of hook_insert
     */
    function challonge_insert($node)
    {
        $params = challonge_init_tournament_params($node);
       
        $xml = helper_add_tournament($node->title, $node->tournament_type, $node->url, $params);
        if ($xml->error)
        {
            drupal_set_message(t('Error adding to Challonge: @error', array('@error' => $xml->error)));
        }
        else
        {
            //after we publish, insert into the database
            db_query("INSERT INTO {challonge_tournament} (nid, tournament_id, tournament_type, url, subdomain) VALUES (%d, %d, '%s', '%s', '%s')", $node->nid, $xml->id, $node->tournament_type, $node->url, $node->subdomain);
        }
    }

    /**
     * Implementation of hook_update
     */
    function challonge_update($node)
    {
        //Reports the winners of each match.
        if($node->match_count){
            for($i = 0; $i < $node->match_count; $i++){
                $match_info = $node->match_settings[$i];
                if($match_info['winner'] == 'none'){
                    continue; 
                }
                //Puts the player scores into csv format.
                $player1_score = 0;
                $player2_score = 0;
                if(isset($match_info['player1_score']) and intval($match_info['player1_score'])){
                    $player1_score = $match_info['player1_score'];
                }
                if(isset($match_info['player2_score']) and intval($match_info['player2_score'])){
                    $player2_score = $match_info['player2_score'];
                }
                //doing the appending the long way because it's late, my brain hurts, and normal way gives me a sum.
                $csv_score = (string)$player1_score;
                $csv_score .= '-';
                $csv_score .= (string)$player2_score;
                //$csv_score = (string)$player1_score + ',' + (string)$player2_score; 
                //and we then send the data to Challonge. 
                $win_report = helper_report_winner($node->url, $match_info['match_id'], $match_info['winner'], $csv_score);  
                if($win_report->error)
                {
                    drupal_set_message(t('Error reporting a match: @error', array('@error' => $win_report->error)));
                }
            }
        }
        //Stuff to do if the tournament exists.
        if ($tournament_id = db_result(db_query("SELECT tournament_id FROM {challonge_tournament} WHERE nid = %d", $node->nid)))
        {
            $params = challonge_init_tournament_params($node);
            $xml = helper_edit_tournament($tournament_id, $node->title, $node->tournament_type, $node->url, $params);

            if ($xml->error)
            {
                drupal_set_message(t('Error updating to Challonge: @error', array('@error' => $xml->error)));
            }
            else
            {
                db_query("UPDATE {challonge_tournament} SET tournament_id = %d, tournament_type = '%s', url = '%s', subdomain = '%s' WHERE nid = %d", $xml->id, $node->tournament_type, $node->url, $node->subdomain, $node->nid);
            }
        }
        else
        {
            challonge_insert($node);
        }
    }


    /**
     * Implemenataion of hook_view
     */
    function challonge_view(&$node, $teaser = FALSE, $page = FALSE)
    {
        $node->content["matches"] = array(
            '#value' => theme('challonge_view', $node, $teaser, $page)
        );
        if($matches->error){
            drupal_set_message(t('Unable to retrieve matches'));
        }
	return $node;
    }

    /**
     * Theme function for challonge_view
     */
    function theme_challonge_view($node, $teaser = FALSE, $page = FALSE)
    {
        $output = '<iframe src="http://challonge.com/'.$node->url.'/module?width=600&height=600" 
                               width="600" height="600" frameborder="0" scrolling="no"></iframe>';
        if($page){
            /* Code is too damn slow
            $output .= "<h3 id='current_matches'> Current Matches </h3>";
            $output .= "<ul id='challonge_matches'>";
            $matches = helper_get_matches($node->url);
            $match_participants = helper_get_participants($matches, $node->url); 
            var_dump($match_participants);

            foreach($match_participants as $participant)
            {
                $output .= "<li class='challonge_match'> <span class='player1'>".$participant['player1'].
                           "</span> <span class='vs'> VS </span> <span class='player2'>". $participant['player2'] . "</span> </li>";
            }
            //Join tournament link.
            $output .= "</ul>";
            */
        }
        $output .= "<div id='join'>". l(t('Click here to join this tournament'), 'challonge_join/'.$node->nid). "</div>";
        return $output;

    }
    /**
     * Implementation of hook_form
     */
    function challonge_form(&$node, $form_state)
    {
         //TODO: create the array for creating seeds.
         //Probably should do that in JQuery.

        $items = array();
        $items['tournament_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Tournament settings'),
            '#collapsible' => TRUE
        );
        $items['tournament_settings']["settings"] = array(
            'title' => array(
                '#type' => 'textfield',
                '#title' => t('Name'),
                '#default_value' => $node->title,
                '#required' => true
            ),
            'body' => array(
                '#type' => 'textarea',
                '#title' => t('Description'),
                '#default_value' => $node->body,
                '#rows' => 10,
                '#required' => true
            ),
            'tournament_type' => array(
                '#type' => 'select',
                '#title' => t('Tournament Type'),
                '#default_value' => $node->tournament_type,
                '#options' => array(
                    "single elimination" =>t('Single Elimination'),
                    "double elimination" =>t('Double Elimination'),
                    "swiss" =>t('Swiss'),
                    "round robin" =>t('Round Robin')
                ),
                '#required' => true
            ),
            'url' => array(
                '#type' => 'textfield',
                '#title' => t('Challonge URL'),
                '#default_value' => $node->url,
                '#required' => true
            ),
            'subdomain' => array(
                '#type' => 'textfield',
                '#title' => t('Challonge Subdomain'),
                '#default_value' => $node->subdomain,
                '#required' => false
            )
        );
        //TODO: refactor into it's own function.
        if($node->url){
             $items['match_settings'] = array(
                 '#type' => 'fieldset',
                 '#title' => t('Report wins.'),
                 '#collapsible' => FALSE,
                 '#tree' => TRUE
             );

             //Match reporting.
             $matches = helper_get_matches($node->url, TRUE);
             $options = array();
             $participants = helper_get_participants($matches, $node->url);

             $match_count = sizeof($matches);
             for($i = 0; $i < $match_count; $i++)
             {
                $index = $i + 1;
                $items['match_settings'][$i] = array(
                     '#type' => 'fieldset',
                     '#title' => t("match $index"),
                     '#collapsible' => FALSE,
                     '#tree' => TRUE
                );
                $items['match_settings'][$i]['match_id'] = array(
                     '#type' => 'value',
                     '#value' => $participants[$i]['match_id']
                );
                //Build the winner options
                $options = $participants[$i]['participants'][0]; 
                $names = array_values($options);
                $player1 = $names[0];
                $player2 = $names[1];

                $options['none'] = 'none';

                $items['match_settings'][$i]['winner'] = array( 
                    '#type' => 'select',
                    '#title' => "winner",
                    '#options' => $options,
                    '#default_value' => 'none'
                );
                //FIXME: currently the size is default even with the size tags.
                $items['match_settings'][$i]['player1_score'] = array(
                   '#type' => 'textfield',
                   '#title' => t("$player1's score"),
                   '#size' => 2,
                   '#maxlength' => 2
                );
                $items['match_settings'][$i]['player2_score'] = array(
                   '#type' => 'textfield',
                   '#title' => t("$player2's score"),
                   '#size' => 2,
                   '#maxlength' => 2
                );

             }
             $items['match_count'] = array('#type' => 'value', '#value' => $match_count);
        }
        return $items; 
    }

    /**
     * Function that allows a user to join a tournament.
     */
    function challonge_join($node_id)
    {
        global $user;
        $node = node_load($node_id);
        if(!$node->url)
        {
             //We can't join a tournament that's not there.
             return theme('challonge_join', 'Unable to find the tournament with the id ' . $node->url);
        }
        $participant = helper_add_participant($node->url, $user->uid);
        if($participant->error)
        {
             return theme('challonge_join', $participant->error);
        }
        return theme('challonge_join');
    }

    /**
     * Implementation of hook_validate
     */
    function challonge_validate($node, &$form)
    {
        //TODO: validate scores to make sure they're ints.
        if (!preg_match('/^[a-zA-Z0-9_]+$/', $node->url))
        {
            form_set_error('challonge_url', t('The url must only contain letters, numbers and underscores.'));
        }
    }

